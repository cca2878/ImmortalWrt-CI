#ubuntu容器中编译
name: WRT-CONTAINER

on:
  workflow_call:
    inputs:
      WRT_REPO:
        default: 'immortalwrt/immortalwrt'
        required: true
        type: string
      WRT_BRANCH:
        default: 'master'
        required: true
        type: string
      WRT_COMMIT:
        description: '指定源码Commit (留空使用最新)'
        default: ''
        required: false
        type: string
      WRT_CONF:
        default: 'x86'
        required: true
        type: string
      WRT_CACHE:
        description: '使用Cache'
        default: false
        required: false
        type: boolean
      WRT_TAGCONF:
        description: 'Tag使用的Conf'
        default: false
        required: false
        type: boolean
      WRT_TEST:
        description: '仅生成Conf'
        default: false
        required: false
        type: boolean
      PATH_MOUNT:
        default: '/volume_mnt'
        required: false
        type: string
        
  workflow_dispatch:
    inputs:
      WRT_REPO:
        default: 'immortalwrt/immortalwrt'
        required: true
        type: string
      WRT_BRANCH:
        default: 'master'
        required: true
        type: string
      WRT_COMMIT:
        description: '指定源码Commit (留空使用最新)'
        default: ''
        required: false
        type: string
      WRT_CONF:
        default: 'x86'
        required: true
        type: string
      WRT_CACHE:
        description: '使用Cache'
        default: false
        required: true
        type: boolean
      WRT_TAGCONF:
        description: 'Tag使用的Conf'
        default: false
        required: true
        type: boolean
      WRT_TEST:
        description: '仅生成Conf'
        default: false
        required: true
        type: boolean
      PATH_MOUNT:
        default: '/volume_mnt'
        required: true
        type: string

env:
  PATH_MOUNT: ${{inputs.PATH_MOUNT}}
  PATH_WORKDIR: ${{inputs.PATH_MOUNT}}/work
  PATH_CI: ci
  PATH_SRC: opwrt_src
  
  WRT_CONF: ${{inputs.WRT_CONF}}
  WRT_TAGCONF: ${{inputs.WRT_TAGCONF}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_COMMIT: ${{inputs.WRT_COMMIT}}
  WRT_TEST: ${{inputs.WRT_TEST}}
  WRT_CACHE: ${{inputs.WRT_CACHE}}

jobs:
  core:
    name: CONTAINER_${{inputs.WRT_REPO}}_${{inputs.WRT_CONF}}
    runs-on: ubuntu-latest
    container: 
      image: ubuntu:latest
      volumes:
        - /mnt:${{inputs.PATH_MOUNT}}
      options: --env TZ=Asia/Shanghai
    defaults:
      run:
        shell: su ubuntu -c "bash {0}"
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Initialize System
        shell: bash
        run: |
          echo "=====Initializing System====="
          apt -yqq update
          apt -yqq install tzdata sudo git dos2unix curl
          
          echo "Setting timezone to Asia/Shanghai..."
          ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          dpkg-reconfigure --frontend noninteractive tzdata
          
          echo "Configuring ubuntu user..."
          passwd -d ubuntu
          
          echo "Setting up work directory..."
          if [ -d $PATH_WORKDIR ]; then
            echo "Removing existing work directory..."
            rm -rf $PATH_WORKDIR
          fi
          mkdir $PATH_WORKDIR
          chmod -R 775 $PATH_WORKDIR
          chown -R ubuntu $PATH_WORKDIR
          echo "System initialization completed!"

      - name: Container Information
        run: |
          echo "========================================"
          echo "         CONTAINER INFORMATION"
          echo "========================================"
          echo "CPU: $(nproc) cores | $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
          echo "Memory: $(free -h | awk 'NR==2{printf "%s total, %s available", $2, $7}')"
          echo "Disk: $(df -h / | awk 'NR==2{printf "%s used / %s total (%s)", $3, $2, $5}')"
          echo ""
          echo "Build Configuration:"
          echo "- Repository: $WRT_REPO"
          echo "- Branch: $WRT_BRANCH"
          echo "- Commit: ${WRT_COMMIT:-'latest'}"
          echo "- Config: $WRT_CONF"
          echo "- Test Mode: $WRT_TEST"
          echo "- Cache: $WRT_CACHE"
          echo "- Time: $(date -Iseconds)"
          echo "========================================"

      - name: Checkout CI Code
        uses: actions/checkout@v4
        with:
          path: ${{env.PATH_CI}}
          
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          repository: ${{env.WRT_REPO}}
          ref: ${{env.WRT_BRANCH}}
          path: ${{env.PATH_SRC}}
          # 获取完整历史以支持指定commit
          fetch-depth: 0

      - name: Initialize Values
        shell: bash
        run: |
          echo "=====Initializing Build Values====="
          if [ $WRT_TAGCONF == true ]; then
            export WRT_TAG=$WRT_CONF'_'$(date -Iseconds)
            echo "Using configuration-based tag: $WRT_TAG"
          else
            export WRT_TAG='build_'$(date -Iseconds)
            echo "Using build-based tag: $WRT_TAG"
          fi
          echo "WRT_TAG=$WRT_TAG" >> $GITHUB_ENV

          export F_DATE=$(date +"%y%m%dT%H%M%S")
          export WRT_VER=$(echo $WRT_REPO | sed 's/\//-/g')'_'$WRT_BRANCH
          echo "F_DATE=$F_DATE" >> $GITHUB_ENV
          echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
          echo "Build date: $F_DATE"
          echo "Version string: $WRT_VER"

      - name: Check and Switch Source Code
        shell: bash
        run: |
          echo "=====Checking and Switching Source Code====="
          cd $GITHUB_WORKSPACE/$PATH_SRC
          
          # 显示当前状态
          echo "Current branch: $(git branch --show-current)"
          echo "Latest commit on branch: $(git log -1 --pretty=format:'%h - %s (%an, %ar)')"
          
          # 如果指定了commit，则切换到该commit
          if [ -n "$WRT_COMMIT" ]; then
            echo "🎯 Switching to specified commit: $WRT_COMMIT"
            
            # 验证commit是否存在
            if git cat-file -e "$WRT_COMMIT^{commit}" 2>/dev/null; then
              git checkout "$WRT_COMMIT"
              echo "✅ Successfully switched to commit: $WRT_COMMIT"
            else
              echo "❌ Error: Commit '$WRT_COMMIT' not found in repository"
              echo "Available recent commits:"
              git log --oneline -10
              exit 1
            fi
          else
            echo "📍 Using latest commit on branch $WRT_BRANCH"
          fi
          
          # 获取最终使用的commit hash
          HASH=$(git log -1 --pretty=format:'%h')
          FULL_HASH=$(git log -1 --pretty=format:'%H')
          echo "WRT_HASH=$HASH" >> $GITHUB_ENV
          echo "WRT_FULL_HASH=$FULL_HASH" >> $GITHUB_ENV
          
          echo ""
          echo "=== Final Source Code Information ==="
          echo "Using commit: $HASH ($FULL_HASH)"
          echo "Commit message: $(git log -1 --pretty=format:'%s')"
          echo "Commit author: $(git log -1 --pretty=format:'%an <%ae>')"
          echo "Commit date: $(git log -1 --pretty=format:'%cd')"
          echo "=================================="

      - name: Prepare Source Code
        run: |
          echo "=====Preparing Source Code====="
          echo "Copying CI scripts to work directory..."
          cp -r $GITHUB_WORKSPACE/$PATH_CI $PATH_WORKDIR/$PATH_CI
          echo "Copying source code to work directory..."
          cp -r $GITHUB_WORKSPACE/$PATH_SRC $PATH_WORKDIR/$PATH_SRC
          
          echo "Cleaning up GitHub workspace..."
          sudo rm -rf $GITHUB_WORKSPACE/$PATH_CI
          sudo rm -rf $GITHUB_WORKSPACE/$PATH_SRC
        
          echo "Setting file permissions..."
          find $PATH_WORKDIR/$PATH_CI -type f -iregex '.*(txt|sh)$' -exec dos2unix {} \; -exec chmod 777 {} \;
          echo "Source code preparation completed!"

      - name: Initialize Build Environment
        run: |
          echo "=====Initializing Build Environment====="
          echo "Upgrading system packages..."
          sudo apt -yqq full-upgrade        
          sudo apt -yqq autoremove --purge
          sudo apt -yqq autoclean
          sudo apt -yqq clean

          echo "Installing ImmortalWrt build environment..."
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          echo "Build environment initialized!"

      - name: Generate Cache Key
        if: ${{ env.WRT_CACHE == 'true' }}
        shell: bash
        run: |
          echo "=====Generating Cache Key====="
          cd $PATH_WORKDIR/$PATH_SRC
          
          # 配置文件内容hash
          CONFIG_HASH=$(sha256sum $PATH_WORKDIR/$PATH_CI/Simple/Config/$WRT_CONF.txt | cut -d' ' -f1 | cut -c1-8)
          
          # 使用实际的commit hash (不是分支名)
          ACTUAL_HASH=$WRT_HASH
          
          # 构建cache key
          CACHE_KEY="${WRT_VER}-${WRT_CONF}-${ACTUAL_HASH}-${CONFIG_HASH}"
          echo "CACHE_KEY=$CACHE_KEY" >> $GITHUB_ENV
          
          echo "Cache key: $CACHE_KEY"
          echo "- Version: $WRT_VER"
          echo "- Config: $WRT_CONF"
          echo "- Commit: $ACTUAL_HASH"
          echo "- Config hash: $CONFIG_HASH"

      - name: Check Caches
        id: check-cache
        if: ${{ env.WRT_TEST != 'true' && env.WRT_CACHE == 'true' }}
        uses: actions/cache@v4
        with:
          key: ${{env.CACHE_KEY}}
          restore-keys: |
            ${{env.WRT_VER}}-${{env.WRT_CONF}}-${{env.WRT_HASH}}-
            ${{env.WRT_VER}}-${{env.WRT_CONF}}-
          path: |
            ${{env.PATH_WORKDIR}}/${{env.PATH_SRC}}/.ccache
            ${{env.PATH_WORKDIR}}/${{env.PATH_SRC}}/staging_dir/host*
            ${{env.PATH_WORKDIR}}/${{env.PATH_SRC}}/staging_dir/tool*
            ${{env.PATH_WORKDIR}}/${{env.PATH_SRC}}/staging_dir/target-*

      - name: Configure Build Cache
        if: ${{ env.WRT_TEST != 'true' && env.WRT_CACHE == 'true' }}
        shell: bash
        run: |
          echo "=====Configuring Build Cache====="
          cd $PATH_WORKDIR/$PATH_SRC
          
          # 配置ccache
          export CCACHE_DIR="$PWD/.ccache"
          export CCACHE_COMPRESS="1"
          echo "CCACHE_DIR=$CCACHE_DIR" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=$CCACHE_COMPRESS" >> $GITHUB_ENV
          
          if [ "${{ steps.check-cache.outputs.cache-hit }}" = "true" ]; then
            echo "✅ Cache hit! Using optimized build strategy."
            echo "BUILD_STRATEGY=fast" >> $GITHUB_ENV
            
            # 显示缓存统计
            ccache -s 2>/dev/null || echo "ccache statistics not available yet"
            echo "Cached staging directories:"
            ls -la staging_dir/ 2>/dev/null || echo "staging_dir will be populated"
            
          else
            echo "❌ Cache miss. Using standard build strategy."
            echo "BUILD_STRATEGY=standard" >> $GITHUB_ENV
            
            # 清理旧缓存 (只在定时任务时)
            if [ "${{ github.event_name }}" = "schedule" ]; then
              echo "Scheduled build: cleaning up old caches..."
              export GH_TOKEN="${{ github.token }}"
              gh extension install actions/gh-actions-cache 2>/dev/null || true
              
              # 只保留最近3个缓存
              CACHE_LIST=$(gh actions-cache list --key "${{env.WRT_VER}}-${{env.WRT_CONF}}" --repo "${{ github.repository }}" --limit 10 2>/dev/null | tail -n +4 | cut -f 1 || echo "")
              for CACHE_KEY_TO_DELETE in $CACHE_LIST; do
                gh actions-cache delete "$CACHE_KEY_TO_DELETE" --repo "${{ github.repository }}" --confirm 2>/dev/null || true
              done
            fi
          fi

      - name: Custom Feeds
        run: |
          echo "=====Configuring Custom Feeds====="
          cd $PATH_WORKDIR/$PATH_SRC
          
          echo "Adding custom feeds for $WRT_CONF..."
          if [ -f "$PATH_WORKDIR/$PATH_CI/Simple/Feeds/$WRT_CONF.txt" ]; then
            cat $PATH_WORKDIR/$PATH_CI/Simple/Feeds/$WRT_CONF.txt >> feeds.conf.default
            echo "Custom feeds configuration added."
          fi
          
          echo "Current feeds configuration:"
          cat feeds.conf.default

      - name: Update Feeds (Always Fresh)
        run: |
          echo "=====Updating Feeds (Always Fresh)====="
          cd $PATH_WORKDIR/$PATH_SRC
          
          echo "🔄 Updating all feeds (no cache)..."
          ./scripts/feeds update -a
          echo "📦 Installing all feeds..."
          ./scripts/feeds install -a
          echo "Feeds update completed!"

      - name: Custom Packages
        run: |
          echo "=====Configuring Custom Packages====="
          cd $PATH_WORKDIR/$PATH_SRC/package/

          echo "Running custom packages script..."
          bash $PATH_WORKDIR/$PATH_CI/Simple/Scripts/Packages.sh
          echo "Running custom handles script..."
          bash $PATH_WORKDIR/$PATH_CI/Simple/Scripts/Handles.sh
          echo "Custom packages configuration completed!"

      - name: Custom Settings
        run: |
          echo "=====Applying Custom Settings====="
          cd $PATH_WORKDIR/$PATH_SRC

          echo "Cleaning temporary files..."
          rm -rf ./tmp* ./.config*

          echo "Applying configuration for $WRT_CONF..."
          cat $PATH_WORKDIR/$PATH_CI/Simple/Config/$WRT_CONF.txt >> .config
          echo "Running custom settings script..."
          bash $PATH_WORKDIR/$PATH_CI/Simple/Scripts/Settings.sh

          echo "Generating default configuration..."
          make -j $(($(nproc)+1)) defconfig V=sc
          echo "Custom settings applied!"

      - name: Download Packages (Always Fresh)
        if: env.WRT_TEST != 'true'
        run: |
          echo "=====Downloading Packages (Always Fresh)====="
          cd $PATH_WORKDIR/$PATH_SRC
          
          echo "🔄 Downloading packages (no cache)..."
          echo "This ensures we always get the latest package versions."
          make -j $(($(nproc)+1)) download V=w
          echo "Package download completed!"

      - name: Compile Firmware (Adaptive)
        if: env.WRT_TEST != 'true'
        id: compile
        continue-on-error: true
        run: |
          echo "=====Compiling Firmware ($BUILD_STRATEGY mode)====="
          echo "$CCACHE_DIR"
          echo "$CCACHE_COMPRESS"
          cd $PATH_WORKDIR/$PATH_SRC
          echo "Compilation started at: $(date -Iseconds)"
          
          if [ "$BUILD_STRATEGY" = "fast" ]; then
            echo "🚀 Fast compilation with cache"
            make -j $(($(nproc)+1)) V=w
          else
            echo "🔨 Standard compilation"
            make -j $(($(nproc)+1)) V=w
          fi

      - name: Compile Firmware (Single-threaded for Error Analysis)
        if: env.WRT_TEST != 'true' && steps.compile.outcome == 'failure'
        run: |
          echo "=====Compiling Firmware (Single-threaded for Error Analysis)====="
          cd $PATH_WORKDIR/$PATH_SRC
          echo "Multi-threaded compilation failed, starting single-threaded compilation for detailed error analysis..."
          echo "This will provide more detailed error information."
          echo "Single-threaded compilation started at: $(date -Iseconds)"
          
          make -j 1 V=sc

      - name: Check Compilation Result
        if: env.WRT_TEST != 'true'
        run: |
          echo "=====Checking Compilation Result====="
          cd $PATH_WORKDIR/$PATH_SRC
          
          if [ "${{ steps.compile.outcome }}" = "success" ]; then
            echo "✅ Multi-threaded compilation completed successfully!"
          elif [ "${{ steps.compile.outcome }}" = "failure" ]; then
            echo "⚠️  Multi-threaded compilation failed, but single-threaded compilation may have succeeded."
            echo "Please check the logs above for detailed error information."
            
            # 检查是否有编译产物来判断单线程编译是否成功
            if find ./bin/targets/ -name "*.bin" -o -name "*.img" -o -name "*.tar" 2>/dev/null | grep -q .; then
              echo "✅ Single-threaded compilation produced firmware files."
            else
              echo "❌ Single-threaded compilation also failed - no firmware files found."
              echo "::warning::Compilation completed with errors - please check logs for details"
              exit 1
            fi
          fi

      - name: Package Firmware
        run: |
          echo "=====Packaging Firmware====="
          cd $PATH_WORKDIR/$PATH_SRC && mkdir ./upload

          echo "Copying configuration file..."
          cp -f ./.config ./upload/config_"$WRT_VER"_"$WRT_CONF"_"$F_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            echo "Packaging firmware files..."
            echo "Removing unnecessary files..."
            find ./bin/targets/ -iregex ".*\(json\|manifest\|packages\)$" -exec rm -rf {} +
            echo "Moving firmware files to upload directory..."
            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
            echo "Firmware files:"
            ls -la ./upload/
          else
            echo "Test mode: only configuration file will be uploaded."
          fi
          echo "Packaging completed!"
          
      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.WRT_VER}}_${{env.WRT_CONF}}_${{env.F_DATE}}${{env.WRT_COMMIT != '' && format('_commit-{0}', env.WRT_HASH) || ''}}
          path: ${{env.PATH_WORKDIR}}/${{env.PATH_SRC}}/upload/*
          if-no-files-found: error
